{"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"ImbfsF9bYSx4","executionInfo":{"status":"ok","timestamp":1651807280955,"user_tz":-330,"elapsed":1670,"user":{"displayName":"Ashu Jha","userId":"13834735113529663543"}}},"outputs":[],"source":["# Importing libraries\n","\n","from __future__ import print_function\n","import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","from sklearn.metrics import classification_report\n","from sklearn import metrics\n","from sklearn import tree\n","import warnings\n","warnings.filterwarnings('ignore')"]},{"cell_type":"code","execution_count":2,"metadata":{"id":"qsYyDEkaYSx-","executionInfo":{"status":"error","timestamp":1651807281647,"user_tz":-330,"elapsed":728,"user":{"displayName":"Ashu Jha","userId":"13834735113529663543"}},"outputId":"74a4ae8c-25f4-4acb-c50f-c936d2ec7219","colab":{"base_uri":"https://localhost:8080/","height":328}},"outputs":[{"output_type":"error","ename":"FileNotFoundError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-2-bc9341d271cb>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mdf\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread_csv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'../Data-processed/crop-recommendation.csv'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/util/_decorators.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    309\u001b[0m                     \u001b[0mstacklevel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mstacklevel\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    310\u001b[0m                 )\n\u001b[0;32m--> 311\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    312\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    313\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mwrapper\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36mread_csv\u001b[0;34m(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, squeeze, prefix, mangle_dupe_cols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, dayfirst, cache_dates, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, encoding_errors, dialect, error_bad_lines, warn_bad_lines, on_bad_lines, delim_whitespace, low_memory, memory_map, float_precision, storage_options)\u001b[0m\n\u001b[1;32m    584\u001b[0m     \u001b[0mkwds\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkwds_defaults\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    585\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 586\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0m_read\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    587\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    588\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m_read\u001b[0;34m(filepath_or_buffer, kwds)\u001b[0m\n\u001b[1;32m    480\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    481\u001b[0m     \u001b[0;31m# Create the parser.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 482\u001b[0;31m     \u001b[0mparser\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mTextFileReader\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    483\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    484\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mchunksize\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0miterator\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, f, engine, **kwds)\u001b[0m\n\u001b[1;32m    809\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moptions\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"has_index_names\"\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mkwds\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"has_index_names\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    810\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 811\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_make_engine\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mengine\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    812\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    813\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mclose\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m_make_engine\u001b[0;34m(self, engine)\u001b[0m\n\u001b[1;32m   1038\u001b[0m             )\n\u001b[1;32m   1039\u001b[0m         \u001b[0;31m# error: Too many arguments for \"ParserBase\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1040\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mmapping\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mengine\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moptions\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# type: ignore[call-arg]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1041\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1042\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_failover_to_python\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/io/parsers/c_parser_wrapper.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, src, **kwds)\u001b[0m\n\u001b[1;32m     49\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     50\u001b[0m         \u001b[0;31m# open handles\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 51\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_open_handles\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msrc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     52\u001b[0m         \u001b[0;32massert\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhandles\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     53\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/io/parsers/base_parser.py\u001b[0m in \u001b[0;36m_open_handles\u001b[0;34m(self, src, kwds)\u001b[0m\n\u001b[1;32m    227\u001b[0m             \u001b[0mmemory_map\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"memory_map\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    228\u001b[0m             \u001b[0mstorage_options\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"storage_options\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 229\u001b[0;31m             \u001b[0merrors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"encoding_errors\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"strict\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    230\u001b[0m         )\n\u001b[1;32m    231\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/io/common.py\u001b[0m in \u001b[0;36mget_handle\u001b[0;34m(path_or_buf, mode, encoding, compression, memory_map, is_text, errors, storage_options)\u001b[0m\n\u001b[1;32m    705\u001b[0m                 \u001b[0mencoding\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mioargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mencoding\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    706\u001b[0m                 \u001b[0merrors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0merrors\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 707\u001b[0;31m                 \u001b[0mnewline\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    708\u001b[0m             )\n\u001b[1;32m    709\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: '../Data-processed/crop-recommendation.csv'"]}],"source":["df = pd.read_csv('../Data-processed/crop-recommendation.csv')"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"c3EyTuq7YSx_","executionInfo":{"status":"aborted","timestamp":1651807280958,"user_tz":-330,"elapsed":33,"user":{"displayName":"Ashu Jha","userId":"13834735113529663543"}}},"outputs":[],"source":["df.head()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"OrTy27M7YSyB","executionInfo":{"status":"aborted","timestamp":1651807280960,"user_tz":-330,"elapsed":35,"user":{"displayName":"Ashu Jha","userId":"13834735113529663543"}}},"outputs":[],"source":["df.tail()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Be0iKvtRYSyC","executionInfo":{"status":"aborted","timestamp":1651807280961,"user_tz":-330,"elapsed":35,"user":{"displayName":"Ashu Jha","userId":"13834735113529663543"}}},"outputs":[],"source":["df.size"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"W_WP0akLYSyD","executionInfo":{"status":"aborted","timestamp":1651807280963,"user_tz":-330,"elapsed":36,"user":{"displayName":"Ashu Jha","userId":"13834735113529663543"}}},"outputs":[],"source":["df.shape"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Qezk9Qw_YSyE","executionInfo":{"status":"aborted","timestamp":1651807280964,"user_tz":-330,"elapsed":37,"user":{"displayName":"Ashu Jha","userId":"13834735113529663543"}}},"outputs":[],"source":["df.columns"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"sqsUZZXqYSyF","executionInfo":{"status":"aborted","timestamp":1651807280966,"user_tz":-330,"elapsed":38,"user":{"displayName":"Ashu Jha","userId":"13834735113529663543"}}},"outputs":[],"source":["df['label'].unique()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"cQ_JTCxmYSyH","executionInfo":{"status":"aborted","timestamp":1651807280967,"user_tz":-330,"elapsed":39,"user":{"displayName":"Ashu Jha","userId":"13834735113529663543"}}},"outputs":[],"source":["df.dtypes"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"G0jDePlOYSyI","executionInfo":{"status":"aborted","timestamp":1651807280969,"user_tz":-330,"elapsed":40,"user":{"displayName":"Ashu Jha","userId":"13834735113529663543"}}},"outputs":[],"source":["df['label'].value_counts()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"kcQDIGNpYSyJ","executionInfo":{"status":"aborted","timestamp":1651807281620,"user_tz":-330,"elapsed":691,"user":{"displayName":"Ashu Jha","userId":"13834735113529663543"}}},"outputs":[],"source":["sns.heatmap(df.corr(),annot=True)"]},{"cell_type":"markdown","metadata":{"id":"qEwYFHV2YSyL"},"source":["### Seperating features and target label"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"rih-ENkbYSyN","executionInfo":{"status":"aborted","timestamp":1651807281622,"user_tz":-330,"elapsed":692,"user":{"displayName":"Ashu Jha","userId":"13834735113529663543"}}},"outputs":[],"source":["features = df[['N', 'P','K','temperature', 'humidity', 'ph', 'rainfall']]\n","target = df['label']\n","#features = df[['temperature', 'humidity', 'ph', 'rainfall']]\n","labels = df['label']"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"g956vPZ7YSyO","executionInfo":{"status":"aborted","timestamp":1651807281623,"user_tz":-330,"elapsed":693,"user":{"displayName":"Ashu Jha","userId":"13834735113529663543"}}},"outputs":[],"source":["# Initialzing empty lists to append all model's name and corresponding name\n","acc = []\n","model = []"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"2wtorzNBYSyP","executionInfo":{"status":"aborted","timestamp":1651807281624,"user_tz":-330,"elapsed":694,"user":{"displayName":"Ashu Jha","userId":"13834735113529663543"}}},"outputs":[],"source":["# Splitting into train and test data\n","\n","from sklearn.model_selection import train_test_split\n","Xtrain, Xtest, Ytrain, Ytest = train_test_split(features,target,test_size = 0.2,random_state =2)"]},{"cell_type":"markdown","metadata":{"id":"Hk7CzDU7YSyQ"},"source":["# Decision Tree"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"wJX5iGoaYSyR","executionInfo":{"status":"aborted","timestamp":1651807281624,"user_tz":-330,"elapsed":693,"user":{"displayName":"Ashu Jha","userId":"13834735113529663543"}}},"outputs":[],"source":["from sklearn.tree import DecisionTreeClassifier\n","\n","DecisionTree = DecisionTreeClassifier(criterion=\"entropy\",random_state=2,max_depth=5)\n","\n","DecisionTree.fit(Xtrain,Ytrain)\n","\n","predicted_values = DecisionTree.predict(Xtest)\n","x = metrics.accuracy_score(Ytest, predicted_values)\n","acc.append(x)\n","model.append('Decision Tree')\n","print(\"DecisionTrees's Accuracy is: \", x*100)\n","\n","print(classification_report(Ytest,predicted_values))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Usbtv7iVYSyS","executionInfo":{"status":"aborted","timestamp":1651807281625,"user_tz":-330,"elapsed":694,"user":{"displayName":"Ashu Jha","userId":"13834735113529663543"}}},"outputs":[],"source":["from sklearn.model_selection import cross_val_score"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"sibXlYMyYSyT","executionInfo":{"status":"aborted","timestamp":1651807281626,"user_tz":-330,"elapsed":695,"user":{"displayName":"Ashu Jha","userId":"13834735113529663543"}}},"outputs":[],"source":["# Cross validation score (Decision Tree)\n","score = cross_val_score(DecisionTree, features, target,cv=5)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"FGf246PNYSyU","executionInfo":{"status":"aborted","timestamp":1651807281627,"user_tz":-330,"elapsed":696,"user":{"displayName":"Ashu Jha","userId":"13834735113529663543"}}},"outputs":[],"source":["score"]},{"cell_type":"markdown","metadata":{"id":"sUAXb39RYSyW"},"source":["### Saving trained Decision Tree model"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ZMg0pPxEYSyW","executionInfo":{"status":"aborted","timestamp":1651807281628,"user_tz":-330,"elapsed":696,"user":{"displayName":"Ashu Jha","userId":"13834735113529663543"}}},"outputs":[],"source":["import pickle\n","# Dump the trained Naive Bayes classifier with Pickle\n","DT_pkl_filename = '../models/DecisionTree.pkl'\n","# Open the file to save as pkl file\n","DT_Model_pkl = open(DT_pkl_filename, 'wb')\n","pickle.dump(DecisionTree, DT_Model_pkl)\n","# Close the pickle instances\n","DT_Model_pkl.close()"]},{"cell_type":"markdown","metadata":{"id":"Hs39E0lKYSyX"},"source":["# Guassian Naive Bayes"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"XSs0fgglYSyY","executionInfo":{"status":"aborted","timestamp":1651807281629,"user_tz":-330,"elapsed":697,"user":{"displayName":"Ashu Jha","userId":"13834735113529663543"}}},"outputs":[],"source":["from sklearn.naive_bayes import GaussianNB\n","\n","NaiveBayes = GaussianNB()\n","\n","NaiveBayes.fit(Xtrain,Ytrain)\n","\n","predicted_values = NaiveBayes.predict(Xtest)\n","x = metrics.accuracy_score(Ytest, predicted_values)\n","acc.append(x)\n","model.append('Naive Bayes')\n","print(\"Naive Bayes's Accuracy is: \", x)\n","\n","print(classification_report(Ytest,predicted_values))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"06pEyJRXYSyZ","executionInfo":{"status":"aborted","timestamp":1651807281629,"user_tz":-330,"elapsed":697,"user":{"displayName":"Ashu Jha","userId":"13834735113529663543"}}},"outputs":[],"source":["# Cross validation score (NaiveBayes)\n","score = cross_val_score(NaiveBayes,features,target,cv=5)\n","score"]},{"cell_type":"markdown","metadata":{"id":"MY8KTKA8YSya"},"source":["### Saving trained Guassian Naive Bayes model"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"lookVkY0YSya","executionInfo":{"status":"aborted","timestamp":1651807281630,"user_tz":-330,"elapsed":697,"user":{"displayName":"Ashu Jha","userId":"13834735113529663543"}}},"outputs":[],"source":["import pickle\n","# Dump the trained Naive Bayes classifier with Pickle\n","NB_pkl_filename = '../models/NBClassifier.pkl'\n","# Open the file to save as pkl file\n","NB_Model_pkl = open(NB_pkl_filename, 'wb')\n","pickle.dump(NaiveBayes, NB_Model_pkl)\n","# Close the pickle instances\n","NB_Model_pkl.close()"]},{"cell_type":"markdown","metadata":{"id":"X_7n2eiWYSyc"},"source":["# Support Vector Machine (SVM)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"-cRmPesTYSyd","executionInfo":{"status":"aborted","timestamp":1651807281631,"user_tz":-330,"elapsed":698,"user":{"displayName":"Ashu Jha","userId":"13834735113529663543"}}},"outputs":[],"source":["from sklearn.svm import SVC\n","# data normalization with sklearn\n","from sklearn.preprocessing import MinMaxScaler\n","# fit scaler on training data\n","norm = MinMaxScaler().fit(Xtrain)\n","X_train_norm = norm.transform(Xtrain)\n","# transform testing dataabs\n","X_test_norm = norm.transform(Xtest)\n","SVM = SVC(kernel='poly', degree=3, C=1)\n","SVM.fit(X_train_norm,Ytrain)\n","predicted_values = SVM.predict(X_test_norm)\n","x = metrics.accuracy_score(Ytest, predicted_values)\n","acc.append(x)\n","model.append('SVM')\n","print(\"SVM's Accuracy is: \", x)\n","\n","print(classification_report(Ytest,predicted_values))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"kDfC3WBJYSyg","executionInfo":{"status":"aborted","timestamp":1651807281632,"user_tz":-330,"elapsed":698,"user":{"displayName":"Ashu Jha","userId":"13834735113529663543"}}},"outputs":[],"source":["# Cross validation score (SVM)\n","score = cross_val_score(SVM,features,target,cv=5)\n","score"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"CNbGCbJCYSyh","executionInfo":{"status":"aborted","timestamp":1651807281632,"user_tz":-330,"elapsed":698,"user":{"displayName":"Ashu Jha","userId":"13834735113529663543"}}},"outputs":[],"source":["#Saving trained SVM model"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"wrrbKqH6YSyi","executionInfo":{"status":"aborted","timestamp":1651807281633,"user_tz":-330,"elapsed":698,"user":{"displayName":"Ashu Jha","userId":"13834735113529663543"}}},"outputs":[],"source":["import pickle\n","# Dump the trained SVM classifier with Pickle\n","SVM_pkl_filename = '../models/SVMClassifier.pkl'\n","# Open the file to save as pkl file\n","SVM_Model_pkl = open(SVM_pkl_filename, 'wb')\n","pickle.dump(SVM, SVM_Model_pkl)\n","# Close the pickle instances\n","SVM_Model_pkl.close()"]},{"cell_type":"markdown","metadata":{"id":"W6NGko52YSyj"},"source":["# Logistic Regression"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"SRuzJZ-ZYSyj","executionInfo":{"status":"aborted","timestamp":1651807281635,"user_tz":-330,"elapsed":699,"user":{"displayName":"Ashu Jha","userId":"13834735113529663543"}}},"outputs":[],"source":["from sklearn.linear_model import LogisticRegression\n","\n","LogReg = LogisticRegression(random_state=2)\n","\n","LogReg.fit(Xtrain,Ytrain)\n","\n","predicted_values = LogReg.predict(Xtest)\n","\n","x = metrics.accuracy_score(Ytest, predicted_values)\n","acc.append(x)\n","model.append('Logistic Regression')\n","print(\"Logistic Regression's Accuracy is: \", x)\n","\n","print(classification_report(Ytest,predicted_values))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"eqOmo6W2YSyk","executionInfo":{"status":"aborted","timestamp":1651807281636,"user_tz":-330,"elapsed":39,"user":{"displayName":"Ashu Jha","userId":"13834735113529663543"}}},"outputs":[],"source":["# Cross validation score (Logistic Regression)\n","score = cross_val_score(LogReg,features,target,cv=5)\n","score"]},{"cell_type":"markdown","metadata":{"id":"3JjjVbfaYSyl"},"source":["### Saving trained Logistic Regression model"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Sa1Mx9tBYSym","executionInfo":{"status":"aborted","timestamp":1651807281637,"user_tz":-330,"elapsed":39,"user":{"displayName":"Ashu Jha","userId":"13834735113529663543"}}},"outputs":[],"source":["import pickle\n","# Dump the trained Naive Bayes classifier with Pickle\n","LR_pkl_filename = '../models/LogisticRegression.pkl'\n","# Open the file to save as pkl file\n","LR_Model_pkl = open(DT_pkl_filename, 'wb')\n","pickle.dump(LogReg, LR_Model_pkl)\n","# Close the pickle instances\n","LR_Model_pkl.close()"]},{"cell_type":"markdown","metadata":{"id":"j7OqTNSCYSyn"},"source":["# Random Forest"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"n8qPBWB_YSyn","executionInfo":{"status":"aborted","timestamp":1651807281638,"user_tz":-330,"elapsed":39,"user":{"displayName":"Ashu Jha","userId":"13834735113529663543"}}},"outputs":[],"source":["from sklearn.ensemble import RandomForestClassifier\n","\n","RF = RandomForestClassifier(n_estimators=20, random_state=0)\n","RF.fit(Xtrain,Ytrain)\n","\n","predicted_values = RF.predict(Xtest)\n","\n","x = metrics.accuracy_score(Ytest, predicted_values)\n","acc.append(x)\n","model.append('RF')\n","print(\"RF's Accuracy is: \", x)\n","\n","print(classification_report(Ytest,predicted_values))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"6KtIIA95YSyo","executionInfo":{"status":"aborted","timestamp":1651807281639,"user_tz":-330,"elapsed":39,"user":{"displayName":"Ashu Jha","userId":"13834735113529663543"}}},"outputs":[],"source":["# Cross validation score (Random Forest)\n","score = cross_val_score(RF,features,target,cv=5)\n","score"]},{"cell_type":"markdown","metadata":{"id":"F0jHPYQFYSyo"},"source":["### Saving trained Random Forest model"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"IKcjtd95YSyp","executionInfo":{"status":"aborted","timestamp":1651807281640,"user_tz":-330,"elapsed":39,"user":{"displayName":"Ashu Jha","userId":"13834735113529663543"}}},"outputs":[],"source":["import pickle\n","# Dump the trained Naive Bayes classifier with Pickle\n","RF_pkl_filename = '../models/RandomForest.pkl'\n","# Open the file to save as pkl file\n","RF_Model_pkl = open(RF_pkl_filename, 'wb')\n","pickle.dump(RF, RF_Model_pkl)\n","# Close the pickle instances\n","RF_Model_pkl.close()"]},{"cell_type":"markdown","metadata":{"id":"f2tI12-lYSyp"},"source":["# XGBoost"]},{"cell_type":"code","execution_count":null,"metadata":{"scrolled":true,"id":"YCRHDfrdYSyq","executionInfo":{"status":"aborted","timestamp":1651807281641,"user_tz":-330,"elapsed":40,"user":{"displayName":"Ashu Jha","userId":"13834735113529663543"}}},"outputs":[],"source":["import xgboost as xgb\n","XB = xgb.XGBClassifier()\n","XB.fit(Xtrain,Ytrain)\n","\n","predicted_values = XB.predict(Xtest)\n","\n","x = metrics.accuracy_score(Ytest, predicted_values)\n","acc.append(x)\n","model.append('XGBoost')\n","print(\"XGBoost's Accuracy is: \", x)\n","\n","print(classification_report(Ytest,predicted_values))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"mLdmiQIhYSyr","executionInfo":{"status":"aborted","timestamp":1651807281643,"user_tz":-330,"elapsed":41,"user":{"displayName":"Ashu Jha","userId":"13834735113529663543"}}},"outputs":[],"source":["# Cross validation score (XGBoost)\n","score = cross_val_score(XB,features,target,cv=5)\n","score"]},{"cell_type":"markdown","metadata":{"id":"SHzH7P9jYSyr"},"source":["### Saving trained XGBoost model"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"JxgHUo2gYSys","executionInfo":{"status":"aborted","timestamp":1651807281644,"user_tz":-330,"elapsed":41,"user":{"displayName":"Ashu Jha","userId":"13834735113529663543"}}},"outputs":[],"source":["import pickle\n","# Dump the trained Naive Bayes classifier with Pickle\n","XB_pkl_filename = '../models/XGBoost.pkl'\n","# Open the file to save as pkl file\n","XB_Model_pkl = open(XB_pkl_filename, 'wb')\n","pickle.dump(XB, XB_Model_pkl)\n","# Close the pickle instances\n","XB_Model_pkl.close()"]},{"cell_type":"markdown","metadata":{"id":"wumA6EfjYSyt"},"source":["## Accuracy Comparison"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"K3JUkc09YSyt","executionInfo":{"status":"aborted","timestamp":1651807281644,"user_tz":-330,"elapsed":40,"user":{"displayName":"Ashu Jha","userId":"13834735113529663543"}}},"outputs":[],"source":["plt.figure(figsize=[10,5],dpi = 100)\n","plt.title('Accuracy Comparison')\n","plt.xlabel('Accuracy')\n","plt.ylabel('Algorithm')\n","sns.barplot(x = acc,y = model,palette='dark')"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"K6GNm9eTYSyu","executionInfo":{"status":"aborted","timestamp":1651807281645,"user_tz":-330,"elapsed":40,"user":{"displayName":"Ashu Jha","userId":"13834735113529663543"}}},"outputs":[],"source":["accuracy_models = dict(zip(model, acc))\n","for k, v in accuracy_models.items():\n","    print (k, '-->', v)"]},{"cell_type":"markdown","metadata":{"id":"_B8NuMz5YSyv"},"source":["## Making a prediction"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"O7FNDcbeYSyv","executionInfo":{"status":"aborted","timestamp":1651807281646,"user_tz":-330,"elapsed":40,"user":{"displayName":"Ashu Jha","userId":"13834735113529663543"}}},"outputs":[],"source":["data = np.array([[104,18, 30, 23.603016, 60.3, 6.7, 140.91]])\n","prediction = RF.predict(data)\n","print(prediction)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"HrLtRql-YSyw","executionInfo":{"status":"aborted","timestamp":1651807281647,"user_tz":-330,"elapsed":40,"user":{"displayName":"Ashu Jha","userId":"13834735113529663543"}}},"outputs":[],"source":["data = np.array([[83, 45, 60, 28, 70.3, 7.0, 150.9]])\n","prediction = RF.predict(data)\n","print(prediction)"]}],"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.10.4"},"colab":{"name":"Crop_Recommendation_Model.ipynb","provenance":[]}},"nbformat":4,"nbformat_minor":0}